plugins {
  id "de.undercouch.download" version "1.2"
}

allprojects {
  apply plugin: 'idea'

  group = "com.apache.mesos.hdfs"
  version = "0.1.3"
}

idea {
  project {
    languageLevel = '1.7'
    ipr {
      withXml { provider ->
        provider.node.component
          .find { it.@name == 'VcsDirectoryMappings' }
          .mapping.@vcs = 'Git'
      }
    }
  }
}

subprojects {

  apply plugin: 'java'
  apply plugin: 'application'

  apply from: "$rootDir/gradle/quality.gradle"
  apply from: "$rootDir/gradle/spock.gradle"

  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  mainClassName = "org.apache.mesos.hdfs.scheduler.Main"

  ext {
    mesosVer = "0.22.1"
    hadoopVer = "2.5.0"
    slf4jVer = "1.7.10"
    logbackVer = "1.1.2"
    guiceVer = "3.0"
    junitVer = "4.11"
    mockitoVer = "1.9.5"
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }

  dependencies {

    compile "org.apache.mesos:mesos:${mesosVer}"

    compile "org.slf4j:log4j-over-slf4j:${slf4jVer}"
    compile "org.slf4j:jcl-over-slf4j:${slf4jVer}"
    compile "ch.qos.logback:logback-classic:${logbackVer}"

    compile("org.apache.hadoop:hadoop-common:${hadoopVer}") {
      exclude group: "log4j", module: "log4j"
      exclude group: "org.slf4j", module: "slf4j-log4j12"
      exclude group: "javax.servlet", module: "servlet-api"
      exclude group: "commons-httpclient", module: "commons-httpclient"
      exclude group: "net.java.dev.jets3t", module: "jets3t"
    }

    compile "com.google.inject:guice:${guiceVer}"

    testCompile "junit:junit:${junitVer}"
    testCompile "org.mockito:mockito-all:${mockitoVer}"
  }
}

// todo (kgs) move this into a separate gradle file... currently there are issues regarding buildscript scoping
ext {
	hadoopVer = "2.5.0-cdh5.3.1"
	hadoopFile = "hadoop-$hadoopVer" +".tar.gz"
	cacheDir = "$buildDir/cache"
}

def	cachedHadoopFile = file("$cacheDir/$hadoopFile")

task ex (dependsOn: [':hdfs-executor:build', ':hdfs-scheduler:build']) << {
	
}

task downloadHadoop(type: de.undercouch.gradle.tasks.download.Download) {
	onlyIfNewer true
	src "http://archive.cloudera.com/cdh5/cdh/5/$hadoopFile"
    dest cachedHadoopFile
}

task unpackHadoop(dependsOn: downloadHadoop, type: Copy) {
    onlyIf { !cachedHadoopFile.exists() }
    from tarTree(resources.gzip(downloadHadoop.dest))
    into buildDir
}
